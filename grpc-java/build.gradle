buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.12'
    }
}

plugins {
    // Apply the java plugin to add support for Java
    id 'java'
    // Required for protobuf
    id "com.google.protobuf" version "0.8.12"
    // Apply the application plugin to add support for building a CLI application.
    id 'application'
}

group 'io.grpc.playground'
version '1.0-SNAPSHOT'

// Update these versions as necessary; these are the current versions as of the writing of this article.
def grpcVersion = '1.49.1'
def protobufVersion = '3.21.6'

// Search these repos for dependencies
repositories {
    mavenCentral()
}
dependencies {
    // grpc dependencies
    // The annotations api is used by the generated gRPC code
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    // This string interpolation ${} lets us reuse the version variables we defined above
    implementation "io.grpc:grpc-all:${grpcVersion}"
    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
    runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"
    // You can use the testing libraries for unit testing your gRPC services (out of scope for this article)
    testImplementation "io.grpc:grpc-testing:${grpcVersion}"
}
application {
    // Define the main class for the application.
    mainClassName = 'io.grpc.playground'
}
test {
    // Use junit platform for unit tests
    useJUnitPlatform()
}

// This holds the configuration for the protocol buffers compilation step
protobuf {
    // Configure the protoc executable
    protoc {
        // Download the proto compiler from maven central
        artifact = 'com.google.protobuf:protoc:3.12.3'
    }
    // In order to get our gRPC service stubs and client/server code, we need to include the gRPC plugin for protobuf
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    // This is needed to apply the gRPC plugin to protoc
    generateProtoTasks {
        all()*.plugins {
            grpc {
                // This optional override for the output directory can be used to place generated code where you need it, in case you do not want generated code mixed with your hand-written code
                outputSubDir = 'java'
            }
        }
    }
    // This changes the base directory where your protobuf and gRPC generated Java code will be dropped
    generatedFilesBaseDir = "$projectDir/src/"
}